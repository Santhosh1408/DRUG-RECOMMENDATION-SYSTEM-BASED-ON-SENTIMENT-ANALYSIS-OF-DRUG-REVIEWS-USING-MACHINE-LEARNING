app.py


import streamlit as st
import pickle
import pandas as pd

                                        ## To Add External CSS ##
with open('css/style.css') as f:
     st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)




                                        ## Application Backend ##

                    # To load medicine-dataframe from pickle in the form of dictionary
medicines_dict = pickle.load(open('medicine_dict.pkl','rb'))
medicines = pd.DataFrame(medicines_dict)

                    # To load similarity-vector-data from pickle in the form of dictionary
similarity = pickle.load(open('similarity.pkl','rb'))

def recommend(medicine):
     medicine_index = medicines[medicines['Drug_Name'] == medicine].index[0]
     distances = similarity[medicine_index]
     medicines_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

     recommended_medicines = []
     for i in medicines_list:
         recommended_medicines.append(medicines.iloc[i[0]].Drug_Name)
     return recommended_medicines





                                    ## Appliaction Frontend ##

                                   # Title of the Application
st.title('Medicine Recommender System')

                                        # Searchbox
selected_medicine_name = st.selectbox(
'Type your medicine name whose alternative is to be recommended',
     medicines['Drug_Name'].values)


                                   # Recommendation Program
if st.button('Recommend Medicine'):
     recommendations = recommend(selected_medicine_name)
     j=1
     for i in recommendations:
          st.write(j,i)                      # Recommended-drug-name
          # st.write("Click here -> "+" https://www.netmeds.com/catalogsearch/result?q="+i) # Recommnded drug purchase link from netmeds
          st.write("Click here -> "+" https://pharmeasy.in/search/all?name="+i) # Recommnded-drug purchase link from pharmeasy
          j+=1



                                         ## Image load ##
from PIL import Image
image = Image.open('images/medicine-image.jpg')
st.image(image, caption='Recommended Medicines')






medicine.recommend.ipynb


import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session
[2]
medicines = pd.read_csv('/kaggle/input/medicine/medicine.csv')
[3]
medicines.head()
[4]
medicines.shape
[5]
medicines.isnull().sum()
[6]
medicines.dropna(inplace=True)
[7]
medicines.duplicated().sum()
[8]
medicines['Description']
[9]
medicines['Description'].apply(lambda x:x.split())
[10]
medicines['Reason'] = medicines['Reason'].apply(lambda x:x.split())
medicines['Description'] = medicines['Description'].apply(lambda x:x.split())
[11]
medicines['Description'] = medicines['Description'].apply(lambda x:[i.replace(" ","") for i in x])
[12]
medicines['Description'] = medicines['Description'].apply(lambda x:[i.replace(" ","") for i in x])
[13]
medicines['tags'] = medicines['Description'] + medicines['Reason'] 
[14]
new_df = medicines[['index','Drug_Name','tags']]
[15]
new_df
[16]
new_df['tags'].apply(lambda x:" ".join(x))
[17]
new_df
[18]
new_df['tags'] = new_df['tags'].apply(lambda x:" ".join(x))
[19]
new_df
[20]
new_df['tags'] = new_df['tags'].apply(lambda x:x.lower())
[21]
new_df
[22]
!pip install nltk
[23]
import nltk
[24]
from nltk.stem.porter import PorterStemmer
ps = PorterStemmer()
[25]
!pip install -U scikit-learn scipy matplotlib
[27]
from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(stop_words='english',max_features=5000)
[28]
def stem(text):
  y = []

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)  
[29]
new_df['tags'] = new_df['tags'].apply(stem)
[30]
cv.fit_transform(new_df['tags']).toarray().shape
[31]
vectors = cv.fit_transform(new_df['tags']).toarray()
[32]
cv.get_feature_names()
[33]
from sklearn.metrics.pairwise import cosine_similarity
[34]
cosine_similarity(vectors)
[35]
similarity = cosine_similarity(vectors)
[36]
similarity[1]
[37]
def recommend(medicine):
    medicine_index = new_df[new_df['Drug_Name'] == medicine].index[0]
    distances = similarity[medicine_index]
    medicines_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
    
    for i in medicines_list:
        print(new_df.iloc[i[0]].Drug_Name)
    
[38]
recommend("Paracetamol 125mg Syrup 60mlParacetamol 500mg Tablet 10'S")
[39]
import pickle
[40]
pickle.dump(new_df.to_dict(),open('medicine_dict.pkl','wb'))
pickle.dump(similarity,open('similarity.pkl','wb'))


